package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

abstract class BasicRepositoryImpl<T> {
    protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
    protected static final LongTransformer LONG_TRANSFORMER = new LongTransformer();

    abstract T find(long id);

    protected <R> List<R> findBy(String query, ObjectTransformer<R> transformable, Object... parameters) {
        List<R> users = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                DatabaseUtils.setUpStatement(statement, parameters);
                try (ResultSet resultSet = statement.executeQuery()) {
                    R object;
                    while ((object = transformable.toObject(statement.getMetaData(), resultSet)) != null) {
                        users.add(object);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find.", e);
        }
        return users;
    }

    protected <R> R getSingle(List<R> list) {
        if (list.size() > 1) {
            throw new RepositoryException("More than one matching");
        }
        if (list.size() == 0) {
            return null;
        }
        return list.get(0);
    }

    public long saveObject(String query, Object... parameters) {
        long objectId;
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
                DatabaseUtils.setUpStatement(statement, parameters);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save data.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        objectId = generatedKeys.getLong("id");
                    } else {
                        throw new RepositoryException("Can't save data [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save data.", e);
        }
        return objectId;
    }

    protected static final class LongTransformer implements ObjectTransformer<Long> {
        @Override
        public Long toObject(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
            if (!resultSet.next()) {
                return null;
            }
            return resultSet.getLong(1);
        }
    }
}